# This workflow is triggered when a release is published via the UI
# The workflow is only executed if the release is a tag and the target_commitish is a release branch
name: Release workflow

# Start the workflow as soon as a release has been published via the UI
on:
  release:
    types: [published]

jobs:
  call-development:
    name: Build the package
    uses: ./.github/workflows/package-development-workflow.yml
    secrets:
      APAX_TOKEN: ${{ secrets.APAX_TOKEN }}
      DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
    with:
      ref: ${{ github.event.release.target_commitish }}  # Use target branch/commit of release
  release:
    name: Release the package
    needs: call-development
    runs-on: ubuntu-24.04
    container:
      image: ghcr.io/simatic-ax/ci-images/apax-ci-image:3.4.2
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.DEPLOY_KEY }}
    steps: 
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.target_commitish }}  # Use target branch/commit of release

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: actions-test/bin
          
      - name: Version package
        uses: ./apax-version # replace with simatic-ax/actions/apax-version@v3
        with:
          version: ${{ github.event.release.tag_name }}
          path: actions-test # remove later, for test purposes only
  
      - name: Package source code
        uses: ./apax-pack # replace with simatic-ax/actions/apax-pack@v3
        with:
          key: ${{ secrets.APAX_SIGNKEY }}
          path: actions-test # remove later, for test purposes only
          
      - name: Login to required registries
        uses: ./apax-login # replace with simatic-ax/actions/apax-login@v3
        with:
          apax-token: ${{ secrets.APAX_TOKEN }}
          registries: |
            https://npm.pkg.github.com/,${{ secrets.DEPLOY_KEY }}
            
      - name: Publish apax package
        uses: ./apax-publish # replace with simatic-ax/actions/apax-publish@v3
        with:
          registries: |
            https://npm.pkg.github.com
          tag: latest
          path: actions-test # remove later, for test purposes only

      - name: Update Changelog
        env:
          RELEASE_BODY: ${{ github.event.release.body }}
          RELEASE_TAG: ${{ github.event.release.tag_name }}
          RELEASE_DATE: ${{ github.event.release.published_at }}
        run: |
          chmod +x .github/workflows/update-changelog.sh
          .github/workflows/update-changelog.sh

          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add CHANGELOG.md
          git commit -m "docs: update changelog for ${{ github.event.release.tag_name }}"
          git push   
      
      # This step manages the version tags after a successful release
      # Input: Release tag (e.g., 1.2.3) from the GitHub release UI
      # Output: - Replaces UI tag with v-prefixed tag (v1.2.3)
      #         - Updates or creates the major version tag (v1)
      - name: Update version tags
        run: |
          # Extract version number (e.g., 1.2.3)
          VERSION=${{ github.event.release.tag_name }}

          if [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            # Create both tag versions
            MAJOR_VERSION="v$(echo $VERSION | cut -d. -f1)"
            FULL_VERSION="v$VERSION"

            echo "Processing release version: $VERSION"
            echo "Updating tags: $MAJOR_VERSION and $FULL_VERSION"

            git config user.name "GitHub Actions"
            git config user.email "actions@github.com"

            # Handle major version tag
            git push origin :refs/tags/$MAJOR_VERSION || true
            git tag -f $MAJOR_VERSION
            git push origin $MAJOR_VERSION --force

            # Handle full version tag
            git push origin :refs/tags/$FULL_VERSION || true
            git tag -f $FULL_VERSION
            git push origin $FULL_VERSION --force

            echo "✅ Tags updated successfully"
          else
            echo "❌ Error: Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z (e.g., 1.2.3)"
            exit 1
          fi