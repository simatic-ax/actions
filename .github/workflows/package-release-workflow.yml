# This workflow is triggered when a release is published via the UI
# The workflow is only executed if the release is a tag and the target_commitish is a release branch
name: Release workflow

# Start the workflow as soon as a release has been published via the UI
on:
  release:
    types: [published]

jobs:
  call-development:
    name: Build the package
    if: ${{ true }}
    uses: ./.github/workflows/package-development-workflow.yml
    secrets:
      APAX_TOKEN: ${{ secrets.APAX_TOKEN }}
      DEPLOY_TOKEN: ${{ secrets.DEPLOY_TOKEN }}
    with:
      ref: ${{ github.event.release.target_commitish }}  # Use target branch/commit of release
  release:
    name: Release the package
    needs: call-development
    # Only run the workflow if the release is a tag and the target_commitish is a release branch
    # Matching the correct branch is being done using naming conventions
    if: ${{ true }}
    runs-on: ubuntu-24.04
    container:
      image: ghcr.io/simatic-ax/ci-images/apax-ci-image:3.4.2
    steps: 
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.target_commitish }}  # Use target branch/commit of release

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: actions-test/bin
          
      - name: Version package
        uses: ./apax-version # replace with simatic-ax/actions/apax-version@v3
        with:
          version: ${{ github.event.release.tag_name }}
          path: actions-test # remove later, for test purposes only
  
      - name: Package source code
        uses: ./apax-pack # replace with simatic-ax/actions/apax-pack@v3
        with:
          key: ${{ secrets.APAX_SIGNKEY }}
          path: actions-test # remove later, for test purposes only
          
      - name: Login to required registries
        uses: ./apax-login # replace with simatic-ax/actions/apax-login@v3
        with:
          apax-token: ${{ secrets.APAX_TOKEN }}
          registries: |
            https://npm.pkg.github.com/,${{ secrets.DEPLOY_TOKEN }}
            
      - name: Publish apax package
        uses: ./apax-publish # replace with simatic-ax/actions/apax-publish@v3
        with:
          registries: |
            https://npm.pkg.github.com
          tag: latest
          path: actions-test # remove later, for test purposes only

      # This step manages the version tags after a successful release
      # Input: Release tag (e.g., 1.2.3) from the GitHub release
      # Output: - Keeps the specific version tag (1.2.3)
      #         - Updates or creates the major version tag (v1)
      - name: Update major version tag
        run: |
          # Extract full version from release tag (e.g., 1.2.3)
          VERSION=${{ github.event.release.tag_name }}
          
          # Validate semantic versioning format (X.Y.Z)
          if [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            # Extract major version number and add v prefix for the major version tag
            # From 1.2.3 -> v1
            MAJOR_VERSION="v$(echo $VERSION | cut -d. -f1)"
            
            echo "Processing release version: $VERSION"
            echo "Updating major version tag: $MAJOR_VERSION"
            
            # Configure git for the tag operation
            git config user.name "GitHub Actions"
            git config user.email "actions@github.com"
            
            # Remove existing major version tag if it exists
            # This is necessary to move the major tag to the new release
            echo "Removing existing major version tag if it exists..."
            git push origin :refs/tags/$MAJOR_VERSION || true
            
            # Create new major version tag pointing to the current commit
            # This tag will move with each release of the same major version
            echo "Creating new major version tag..."
            git tag -f $MAJOR_VERSION
            
            # Push the updated major version tag
            # --force is needed because we're moving an existing tag
            echo "Pushing updated major version tag..."
            git push origin $MAJOR_VERSION --force
            
            echo "Tag management completed successfully"
          else
            echo "Error: Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z (e.g., 1.2.3)"
            exit 1
          fi