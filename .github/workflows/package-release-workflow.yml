# This workflow is triggered when a release is published via the UI
# The workflow is only executed if the release is a tag and the target_commitish is a release branch
name: Release workflow

# Start the workflow as soon as a release has been published via the UI
on:
  release:
    types: [published]

permissions:
  contents: write    # Für Git-Operationen, Tags und Releases
  packages: write    # Für Package-Publikation
  actions: read      # Für Artifact-Download
  pull-requests: write # Für PR-Erstellung und Management

jobs:
  call-development:
    name: Build the package
    uses: ./.github/workflows/package-development-workflow.yml
    secrets:
      APAX_TOKEN: ${{ secrets.APAX_TOKEN }}
    with:
      ref: ${{ github.event.release.target_commitish }}

  release:
    name: Release the package
    needs: call-development
    runs-on: ubuntu-24.04
    container:
      image: ghcr.io/simatic-ax/ci-images/apax-ci-image:3.4.2
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps: 
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.target_commitish }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: actions-test/bin

      - name: Version package
        uses: ./apax-version
        with:
          version: ${{ github.event.release.tag_name }}
          path: actions-test

      - name: Package source code
        uses: ./apax-pack
        with:
          key: ${{ secrets.APAX_SIGNKEY }}
          path: actions-test

      - name: Login to required registries
        uses: ./apax-login
        with:
          apax-token: ${{ secrets.APAX_TOKEN }}
          registries: |
            https://npm.pkg.github.com/,${{ secrets.GITHUB_TOKEN }}

      - name: Publish apax package
        uses: ./apax-publish
        with:
          registries: |
            https://npm.pkg.github.com
          tag: latest
          path: actions-test

      - name: Create Changelog Update PR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_BODY: ${{ github.event.release.body }}
          RELEASE_TAG: ${{ github.event.release.tag_name }}
          RELEASE_DATE: ${{ github.event.release.published_at }}
        run: |
          # Create new branch for changelog update
          git checkout -b changelog-update-${{ github.event.release.tag_name }}

          # Update changelog
          chmod +x .github/workflows/update-changelog.sh
          .github/workflows/update-changelog.sh

          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Commit and push changes
          git add CHANGELOG.md
          git commit -m "docs: update changelog for ${{ github.event.release.tag_name }}"
          git push origin changelog-update-${{ github.event.release.tag_name }}

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        id: cpr
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: changelog-update-${{ github.event.release.tag_name }}
          title: "docs: update changelog for ${{ github.event.release.tag_name }}"
          body: |
            Automated changelog update for release ${{ github.event.release.tag_name }}

            This PR was automatically created by the release workflow.
          base: ${{ github.event.release.target_commitish }}
          delete-branch: true

      - name: Enable Pull Request Automerge
        if: steps.cpr.outputs.pull-request-operation == 'created'
        run: |
          gh pr merge --auto --merge "${{ steps.cpr.outputs.pull-request-number }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Wait for PR merge
        if: steps.cpr.outputs.pull-request-operation == 'created'
        run: |
          while true; do
            PR_STATE=$(gh pr view "${{ steps.cpr.outputs.pull-request-number }}" --json state -q .state)
            if [ "$PR_STATE" = "MERGED" ]; then
              echo "PR was merged successfully"
              break
            elif [ "$PR_STATE" = "CLOSED" ]; then
              echo "PR was closed without merging"
              exit 1
            fi
            echo "Waiting for PR to be merged..."
            sleep 10
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update version tags
        if: ${{ success() }}  # Nur ausführen, wenn PR erfolgreich gemerged wurde
        run: |
          VERSION=${{ github.event.release.tag_name }}

          if [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            MAJOR_VERSION="v$(echo $VERSION | cut -d. -f1)"
            FULL_VERSION="v$VERSION"

            echo "Processing release version: $VERSION"
            echo "Updating tags: $MAJOR_VERSION and $FULL_VERSION"

            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

            git push origin :refs/tags/$MAJOR_VERSION || true
            git tag -f $MAJOR_VERSION
            git push origin $MAJOR_VERSION --force

            git push origin :refs/tags/$FULL_VERSION || true
            git tag -f $FULL_VERSION
            git push origin $FULL_VERSION --force

            echo "✅ Tags updated successfully"
          else
            echo "❌ Error: Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z (e.g., 1.2.3)"
            exit 1
          fi