name: "Deprecate an already published package"
description: "Builds the source code based on the projects apax.yaml file"
inputs:
  registry:
    description: "The URL to access the registry. The deprecate package must exists in this registry and you have access right to this registry"
    required: true
  package-name:
    description: "The name of the package to be deprecated"
    required: true
  versions-to-deprecate:
    description: "A newline-delimited string of the versions of the package to be deprecated. In case no version is provided, all versions of that package are going to be deprecated"
    required: false
  un-deprecate:
    description: "If set to true, the package will be undeprecated"
    required: false
    default: "false"
runs:
  using: "composite"
  steps:
    - name: Deprecate Package
      shell: bash
      run: |
        # Base command
        CMD="apax deprecate"

        # Add the registry
        CMD="$CMD --registry \"${{ inputs.registry }}\""

        # Add the un-deprecate flag if true
        if [ "${{ inputs.un-deprecate }}" == "true" ]; then
          CMD="$CMD --undeprecate"
        fi

        # Process versions-to-deprecate input
        if [ -n "${{ inputs.versions-to-deprecate }}" ]; then
          IFS=$'\n' read -rd '' -a versions <<< "${{ inputs.versions-to-deprecate }}"
          for version in "${versions[@]}"; do
            if [ -n "$version" ]; then
              FULL_COMMAND="$CMD ${{ inputs.package-name }}@$version"
              echo "Running command: $FULL_COMMAND"
              eval "$FULL_COMMAND"
            fi
          done
        else
          # If no versions specified, deprecate all versions
          FULL_COMMAND="$CMD ${{ inputs.package-name }}"
          echo "Running command: $FULL_COMMAND"
          eval "$FULL_COMMAND"
        fi